head(trees.dists,n=10)
trees.dists.inv <- 1/trees.dists
diag(trees.dists.inv) <- 0
trees.dists.inv[1:5, 1:5]
Moran.I(allcountr$n_parcel_Tree_Fruit, trees.dists.inv)
library(ape)
install.packages("ape")
library(ape)
sessionInfo()
Moran.I(allcountr$n_parcel_Tree_Fruit, trees.dists.inv)
Moran.I(allcountr$d_trees, trees.dists.inv)
TZN=subset(allcountr, country =='TZN')
TZN
trees.dists <- as.matrix(dist(cbind(TZN$longitude, TZN$latitude)))
trees.dists
TZN.dists.inv <- 1/TZN.dists
TZN.dists <- as.matrix(dist(cbind(TZN$longitude, TZN$latitude)))
TZN.dists.inv <- 1/TZN.dists
diag(TZN.dists.inv) <- 0
View(TZN.dists.inv)
View(TZN.dists.inv)
Moran.I(TZN$d_trees, TZN.dists.inv)
View(TZN.dists.inv)
View(TZN.dists.inv)
TZN.dists.inv[TZN.dists.inv=="Inf"]<-0
Moran.I(TZN$d_trees, TZN.dists.inv)
for (country in allcountr$country){
print(paste("The year is", year))
}
for (country in allcountr$country){
print(paste("The year is", country))
}
x=["ETH","MW","NGA","TZN","UGA"]
x=("ETH","MW","NGA","TZN","UGA")
names(vals) <- c("numbers", "model", "function")
x=list("ETH","MW","NGA","TZN","UGA")
for f in x:for (country in x){
print(paste("The year is", country))
}
for (country in x){
print(paste("The year is", country))
}
for (count in x){
print(paste("Country", country))
[count]=subset(allcountr, country =='[count]')
}
for (count in x) {
print(paste("Country", country))
y_[count]=subset(allcountr, country =='[count]')
}
for (count in x) {
print(paste("Country", count))
y_[count]=subset(allcountr, country =='[count]')
}
for (count in x) {
print(paste("", count))
}
for (count in x) {
print(paste(count))
}
for (count in x) {
print(paste(count))
assign(paste(count), subset(allcountr, country =='count'))
}
for (count in x) {
print(paste(count))
assign(paste(count), subset(allcountr, country ==count))
}
for (count in x) {
print(paste(count))
assign(paste(count), subset(allcountr, country ==count))
assign(paste(count,.dists),as.matrix(dist(cbind(count$longitude, count$latitude)))
}
for (count in x) {
print(paste(count))
assign(paste(count), subset(allcountr, country ==count))
nam <- paste(i,".dists", sep ="")
}
for (count in x) {
print(paste(count))
assign(paste(count), subset(allcountr, country ==count))
nam <- paste(count,".dists", sep ="")
}
for (count in x) {
print(paste(count))
assign(paste(count), subset(allcountr, country ==count))
nam <- paste(count,".dists", sep ="")
assign(nam,as.matrix(dist(cbind(count$longitude, count$latitude)))
}
for (count in x) {
print(paste(count))
nam0 <-paste(count)
assign(nam0, subset(allcountr, country ==count))
nam1 <- paste(count,".dists", sep ="")
assign(nam1,as.matrix(dist(cbind(nam0$longitude, nam0$latitude)))
}
for (count in x) {
print(paste(count))
nam0 <-paste(count)
assign(nam0, subset(allcountr, country ==count))
nam1 <- paste(count,".dists", sep ="")
assign(nam1,(as.matrix(dist(cbind(nam0$longitude, nam0$latitude))))
}
TZN=subset(allcountr, country =="TZN")
head(TZN.dists,n=10)
TZN.dists.inv <- 1/TZN.dists
diag(TZN.dists.inv) <- 0
TZN.dists.inv[TZN.dists.inv=="Inf"]<-0
# Now Morans
Moran.I(TZN$d_trees, TZN.dists.inv)
ETH=subset(allcountr, country =="ETH")
head(ETH.dists,n=10)
ETH.dists.inv <- 1/ETH.dists
diag(ETH.dists.inv) <- 0
ETH.dists.inv[ETH.dists.inv=="Inf"]<-0
ETH=subset(allcountr, country =="ETH")
ETH=subset(allcountr, country =="ETH")
ETH.dists=as.matrix(dist(cbind(ETH$longitude, ETH$latitude)))
head(ETH.dists,n=10)
ETH.dists.inv <- 1/ETH.dists
diag(ETH.dists.inv) <- 0
ETH.dists.inv[ETH.dists.inv=="Inf"]<-0
# Now Morans
Moran.I(TZN$d_trees, TZN.dists.inv)
TZN=subset(allcountr, country =="TZN")
TZN.dists=as.matrix(dist(cbind(TZN$longitude, TZN$latitude)))
#head(TZN.dists,n=10)
TZN.dists.inv <- 1/TZN.dists
diag(TZN.dists.inv) <- 0
TZN.dists.inv[TZN.dists.inv=="Inf"]<-0
# Now Morans
Moran.I(TZN$d_trees, TZN.dists.inv)
ETH=subset(allcountr, country =="ETH")
ETH.dists=as.matrix(dist(cbind(ETH$longitude, ETH$latitude)))
#head(ETH.dists,n=10)
ETH.dists.inv <- 1/ETH.dists
diag(ETH.dists.inv) <- 0
ETH.dists.inv[ETH.dists.inv=="Inf"]<-0
# Now Morans
Moran.I(TZN$d_trees, TZN.dists.inv)
ETH.dists.bin <- (ETH.dists > 0 & ETH.dists <= .75)
Moran.I(ETH$d_trees, ETH.dists.inv)
Moran.I(ETH$d_trees, ETH.dists.inv)
ETH
View(ETH)
View(ETH)
Moran.I(ETH$d_tree_fruit, ETH.dists.inv)
Moran.I(ETH$d_tree_agri, ETH.dists.inv)
Moran.I(ETH$d_tree_wood, ETH.dists.inv)
library(geosphere)
install.packages("geosphere")
library("geosphere", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
# Spatial Correlation
library(ape)
library(geosphere)
install.packages("ape")
install.packages("geosphere")
library(ape)
library(geosphere)
# Open
allcountr<-read.table("/Users/juancarlosmunoz/Box Sync/MythsAndFacts-TreesOnFarm/DataAnalysis/2_Regressions/Data/NewGeoVars/TreesOnFarm_All.csv", sep=",", header=T)
head(allcountr, n=10)
# Create The Distance Matrix
ETH=subset(allcountr, country =="ETH")
distHaversine(ETH$longitude, ETH$latitude, r=6378137)
2=as.matrix(distHaversine(ETH$longitude, ETH$latitude, r=6378137))
for i in ETH {
print i
}
for i in ETH {
print(paste(i))
}
TZN=subset(allcountr, country =="TZN")
TZN.dists=as.matrix(dist(cbind(TZN$longitude, TZN$latitude)))
#head(TZN.dists,n=10)
TZN.dists.inv <- 1/TZN.dists
diag(TZN.dists.inv) <- 0
TZN.dists.inv[TZN.dists.inv=="Inf"]<-0
# Now Morans
Moran.I(ETH$d_trees, ETH.dists.inv)
Moran.I(ETH$d_tree_fruit, ETH.dists.inv)
Moran.I(ETH$d_tree_agri, ETH.dists.inv)
Moran.I(ETH$d_tree_wood, ETH.dists.inv)
ETH=subset(allcountr, country =="ETH")
2=as.matrix(distHaversine(ETH$longitude, ETH$latitude, r=6378137))
ETH.dists=as.matrix(dist(cbind(ETH$longitude, ETH$latitude)))
#head(ETH.dists,n=10)
ETH.dists.inv <- 1/ETH.dists
diag(ETH.dists.inv) <- 0
ETH.dists.inv[ETH.dists.inv=="Inf"]<-0
ETH.dists.bin <- (ETH.dists > 0 & ETH.dists <= .75)
Moran.I(ETH$d_trees, ETH.dists.inv)
Moran.I(ETH$d_tree_fruit, ETH.dists.inv)
dist(cbind(ETH$longitude, ETH$latitude))
sum(ETH.dists)
summary(ETH.dists)
# Spatial Correlation
library(ape)
library(geosphere)
# Open
allcountr<-read.table("/Users/juancarlosmunoz/Box Sync/MythsAndFacts-TreesOnFarm/DataAnalysis/2_Regressions/Data/NewGeoVars/TreesOnFarm_All.csv", sep=",", header=T)
head(allcountr, n=10)
# Create The Distance Matrix
ETH=subset(allcountr, country =="ETH")
ETH.dists=as.matrix(dist(cbind(ETH$longitude, ETH$latitude)))
++
cbind(allcountr$longitude, allcountr$latitude)
cbind(allcountr$longitude, allcountr$latitude)
for (counter in ETH) {
print counter
}
for (counter in ETH) {
print(paste(counter))
}
for (counter in ETH) {
print(paste(counter$d_tree))
}
for (counter in ETH) {
print(paste(ETH[counter]$d_tree))
}
i=0
for (j in ETH) {
print(paste(ETH[i]$d_tree))
i=i+1
}
i=0
for (j in ETH$d_tree) {
print(paste(j))
i=i+1
}
i=0
for (j in ETH$d_tree) {
print(paste(j))
i=i+1
}
ETH=subset(allcountr, country =="ETH")
ETH.dists=as.matrix(dist(cbind(ETH$longitude, ETH$latitude)))
ETH.dists.inv <- 1/ETH.dists
diag(ETH.dists.inv) <- 0
ETH.dists.inv[ETH.dists.inv=="Inf"]<-0
ETH.dists.bin <- (ETsummary(mydata)H.dists > 0 & ETH.dists <= .75)
Moran.I(ETH$d_trees, ETH.dists.inv)
Moran.I(ETH$d_tree_fruit, ETH.dists.inv)
Moran.I(ETH$d_tree_agri, ETH.dists.inv)
Moran.I(ETH$d_tree_wood, ETH.dists.inv)
MW=subset(allcountr, country =="MW")
MW.dists=as.matrix(dist(cbind(MW$longitude, MW$latitude)))
MW.dists.inv <- 1/MW.dists
diag(MW.dists.inv) <- 0
MW.dists.inv[MW.dists.inv=="Inf"]<-0
MW.dists.bin <- (ETsummary(mydata)H.dists > 0 & MW.dists <= .75)
# Now Morans
Moran.I(MW$d_trees, MW.dists.inv)
Moran.I(MW$d_tree_fruit, MW.dists.inv)
Moran.I(MW$d_tree_agri, MW.dists.inv)
Moran.I(MW$d_tree_wood, MW.dists.inv)
NGA=subset(allcountr, country =="NGA")
NGA.dists=as.matrix(dist(cbind(NGA$longitude, NGA$latitude)))
NGA.dists.inv <- 1/NGA.dists
diag(NGA.dists.inv) <- 0
NGA.dists.inv[NGA.dists.inv=="Inf"]<-0
NGA.dists.bin <- (ETsummary(mydata)H.dists > 0 & NGA.dists <= .75)
# Now Morans
Moran.I(NGA$d_trees, NGA.dists.inv)
Moran.I(NGA$d_tree_fruit, NGA.dists.inv)
Moran.I(NGA$d_tree_agri, NGA.dists.inv)
Moran.I(NGA$d_tree_wood, NGA.dists.inv)
TZN=subset(allcountr, country =="TZN")
TZN.dists=as.matrix(dist(cbind(TZN$longitude, TZN$latitude)))
TZN.dists.inv <- 1/TZN.dists
diag(TZN.dists.inv) <- 0
TZN.dists.inv[TZN.dists.inv=="Inf"]<-0
# Now Morans
Moran.I(TZN$d_trees, TZN.dists.inv)
Moran.I(TZN$d_tree_fruit, TZN.dists.inv)
Moran.I(TZN$d_tree_agri, TZN.dists.inv)
Moran.I(TZN$d_tree_wood, TZN.dists.inv)
UGA=subset(allcountr, country =="UGA")
UGA.dists=as.matrix(dist(cbind(UGA$longitude, UGA$latitude)))
UGA.dists.inv <- 1/UGA.dists
diag(UGA.dists.inv) <- 0
UGA.dists.inv[UGA.dists.inv=="Inf"]<-0
# Now Morans
Moran.I(UGA$d_trees, UGA.dists.inv)
Moran.I(UGA$d_tree_fruit, UGA.dists.inv)
Moran.I(UGA$d_tree_agri, UGA.dists.inv)
Moran.I(UGA$d_tree_wood, UGA.dists.inv)
install.packages("maptools")
install.packages("maps")
install.packages("gdalUtils")
install.packages("regal")
library(maptools)
data(meuse.grid)
coordinates(meuse.grid) <- c("x", "y")
library(maptools)
data(meuse.grid)
coordinates(meuse.grid) <- c("x", "y")
meuse.grid <- as(meuse.grid, "SpatialPixelsDataFrame")
im <- as.image.SpatialGridDataFrame(meuse.grid["dist"])
cl <- ContourLines2SLDF(contourLines(im))
spplot(cl)
library(maptools)
library(maps)
wrld <- map("world", interior = FALSE, xlim = c(-179,+ 179), ylim = c(-89, 89), plot = FALSE)
library(maptools)
library(maps)
wrld <- map("world", interior = FALSE, xlim = c(-179,+ 179), ylim = c(-89, 89), plot = FALSE)
wrld_p <- pruneMap(wrld, xlim = c(-179, 179))
llCRS <- CRS("+proj=longlat +ellps=WGS84")
wrld_sp <- map2SpatialLines(wrld_p, proj4string = llCRS)
prj_new <- CRS("+proj=moll")
library(rgdal)
library(maptools)
library(maps)
wrld <- map("world", interior = FALSE, xlim = c(-179,+ 179), ylim = c(-89, 89), plot = FALSE)
wrld_p <- pruneMap(wrld, xlim = c(-179, 179))
llCRS <- CRS("+proj=longlat +ellps=WGS84")
wrld_sp <- map2SpatialLines(wrld_p, proj4string = llCRS)
prj_new <- CRS("+proj=moll")
library(rgdal)
wrld_proj <- spTransform(wrld_sp, prj_new)
wrld_grd <- gridlines(wrld_sp, easts = c(-179, seq(-150,+ 150, 50), 179.5), norths = seq(-75, 75, 15), ndiscr = 100)
wrld_grd_proj <- spTransform(wrld_grd, prj_new)
at_sp <- gridat(wrld_sp, easts = 0, norths = seq(-75,+ 75, 15), offset = 0.3)
at_proj <- spTransform(at_sp, prj_new)
plot(wrld_proj, col = "grey60")
plot(wrld_grd_proj, add = TRUE, lty = 3, col = "grey70")
text(coordinates(at_proj), pos = at_proj$pos, offset = at_proj$offset,+labels = parse(text = as.character(at_proj$labels)),+ cex = 0.6)
library(maptools)
library(maps)
wrld <- map("world", interior = FALSE, xlim = c(-179,+ 179), ylim = c(-89, 89), plot = FALSE)
wrld_p <- pruneMap(wrld, xlim = c(-179, 179))
llCRS <- CRS("+proj=longlat +ellps=WGS84")
wrld_sp <- map2SpatialLines(wrld_p, proj4string = llCRS)
prj_new <- CRS("+proj=moll")
library(rgdal)
wrld_proj <- spTransform(wrld_sp, prj_new)
wrld_grd <- gridlines(wrld_sp, easts = c(-179, seq(-150,+ 150, 50), 179.5), norths = seq(-75, 75, 15), ndiscr = 100)
wrld_grd_proj <- spTransform(wrld_grd, prj_new)
at_sp <- gridat(wrld_sp, easts = 0, norths = seq(-75,+ 75, 15), offset = 0.3)
at_proj <- spTransform(at_sp, prj_new)
plot(wrld_proj, col = "grey60")
plot(wrld_grd_proj, add = TRUE, lty = 3, col = "grey70")
text(coordinates(at_proj), pos = at_proj$pos, offset = at_proj$offset,+labels = parse(text = as.character(at_proj$labels)),+ cex = 0.6)
ibrary(devtools)
library(devtools)
install_github("quantide/mapIT")
library(ggplot2)
library(sp)
library(rgdal)
library(rgeos)
install.packages("rgeos")
# load libraries
library(ggplot2)
library(sp)
library(rgdal)
library(rgeos)
# create a local directory for the data
localDir <- "R_GIS_data"
if (!file.exists(localDir)) {
dir.create(localDir)
}
# download and unzip the data
url <- "ftp://www.ecy.wa.gov/gis_a/hydro/wria.zip"
file <- paste(localDir, basename(url), sep='/')
if (!file.exists(file)) {
download.file(url, file)
unzip(file,exdir=localDir)
}
# create a layer name for the shapefiles (text before file extension)
layerName <- "Africa_Regions"
# read data into a SpatialPolygonsDataFrame object
dataProjected <- readOGR(dsn=localDir, layer=layerName)
# load libraries
library(ggplot2)
library(sp)
library(rgdal)
library(rgeos)
# create a local directory for the data
localDir <- "R_GIS_data"
if (!file.exists(localDir)) {
dir.create(localDir)
}
# download and unzip the data
url <- "http://www.onrc.washington.edu/wria20/shape/wria20.zip"
file <- paste(localDir, basename(url), sep='/')
if (!file.exists(file)) {
download.file(url, file)
unzip(file,exdir=localDir)
}
# create a layer name for the shapefiles (text before file extension)
layerName <- "Africa_Regions"
# read data into a SpatialPolygonsDataFrame object
dataProjected <- readOGR(dsn=localDir, layer=layerName)
# read data into a SpatialPolygonsDataFrame object
dataProjected <- readOGR(dsn=localDir, layer=layerName)
# load libraries
library(ggplot2)
library(sp)
library(rgdal)
library(rgeos)
##set directory to the folder where the shapefile is, then input shapefile
setwd("/Users/juancarlosmunoz/Dropbox/Documents/Teaching/00_GIS_Applied_Economics/data_and_syntaxis/Session_2/Polygons/")
states.shp <- readShapeSpatial("Africa_dvp_level0.shp")
# load libraries
library(ggplot2)
library(sp)
library(rgdal)
library(rgeos)
##set directory to the folder where the shapefile is, then input shapefile
setwd("/Users/juancarlosmunoz/Dropbox/Documents/Teaching/00_GIS_Applied_Economics/data_and_syntaxis/Session_2/Polygons/")
africa.shp <- readShapeSpatial("Africa_dvp_level0.shp")
class(africa.shp)
# load libraries
library(ggplot2)
library(sp)
library(rgdal)
library(rgeos)
##set directory to the folder where the shapefile is, then input shapefile
setwd("/Users/juancarlosmunoz/Dropbox/Documents/Teaching/00_GIS_Applied_Economics/data_and_syntaxis/Session_2/Polygons/")
africa.shp <- readShapeSpatial("Africa_dvp_level0.shp")
class(africa.shp)
### Check columns in the attributes table
names(africa.shp)
print(africa.shp$REGION)
num.africa<-length(africa.shp$REGION)
num.africa
names(africa.shp)
mydata<-data.frame(REGION=africa.shp$REGION, id=africa.shp$ADM0_CODE, prevalence=rnorm(num.africa, 55, 20))
head(mydata)
africa.shp.f <- fortify(africa.shp, region = "ADM0_CODE")
class(africa.shp.f)
africa.shp.f <- fortify(africa.shp, region = "ADM0_CODE")
africa.shp.f <- fortify(africa.shp, region = "REGION")
library(maptools)
library(RColorBrewer)
library(classInt)
## set the working directory.
setwd("/the/folder/where/bayarea_zipcode.shp/is/saved/")
## load the shapefile
zip<- readShapePoly("bayarea_zipcodes.shp") #add the median household incomes for each zipcode to the .shp file
med.income = c(55995, 54448, 50520, 43846, 50537, 67705, 45142, 36518, NA, 65938, 50500, 61022, 65959, 17188, 53881, 66970, 35699, 76194, 63777, 63838, 66010, 48523, 70758, 41002, 60082, 48672, 61429, 60402, 75707, 58333, 60769, 60375, 76627, 68515, 64485, 60971, 60833, 54732, 60804, 33962, 57601, 43649, 59889, NA, 61494, 67824, 64429, 82528, 101555, 96658, 50300, 41573, 75747, 53750, 56905, 85479, 77455, 64389, 91283, 119832, 103791, 100590, 85109, 88184, 57153, 34951, 51418, 38613, 43640, 19750, 139997, 39290, NA, 76808, 98525, 106492, 68112, 68853, 77952, 34398, 75026, 33556, NA, 109771, 142459, 80959, 21124, 49066, 95588, 55321, 20034, 57976, 40990, 73571, 84710, 43444, 32273, 56569, 54174, 105393, 51896, 31542, 33152, 54879, 88976, 14609, 61609, 61776, 22351, 31131, 47288, NA, 63983, 60733, 29181, 75727, 61362, 53795, 76044, 34755, 66627, 37146, 92644, 87855, 95313, 50888, 55000, 57629, 54342, 77122, 44723, 64534, 65658, 60711, 57214, 54594, 48523, 90107, 69014, 49452, 72288, 56973, 81923, 61289, 71863, 61939, 0, 82735, 68067, 82188, 70026, 101977, 55112, 84442, 82777, 82796, 92989, 67152, 68121, 69350, 104958, 49279, 80973, 89016, 96677, 89572, 64256, 84565, 16250, 64839, 200001, 82072, 58304, 66807, 97758, 68721, 77539, 41313, NA, 82314, 164479, 69087, 145425, NA, 71056, 128853, 84856)
zip$INCOME = med.income
#select color palette and the number colors (levels of income) to represent on the map
colors <- brewer.pal(9, "YlOrRd") #set breaks for the 9 colors
brks<-classIntervals(zip$INCOME, n=9, style="quantile")
brks<- brks$brks #plot the map
plot(zip, col=colors[findInterval(zip$INCOME, brks,all.inside=TRUE)], axes=F)
#add a title
title(paste ("SF Bay Area Median Household Income"))
#add a legend
legend(x=6298809, y=2350000, legend=leglabs(round(brks)), fill=colors, bty="n",x.intersp = .5, y.intersp = .5)
library(maptools)
library(RColorBrewer)
library(classInt)
install.packages("classInt")
library(maptools)
library(RColorBrewer)
library(classInt)
## set the working directory.
setwd("/the/folder/where/bayarea_zipcode.shp/is/saved/")
library(maptools)
library(RColorBrewer)
library(classInt)
## set the working directory.
setwd("/Users/juancarlosmunoz/Dropbox/Documents/Teaching/00_GIS_Applied_Economics/data_and_syntaxis/Session_2/Polygons/")
zip<- readShapePoly("Africa_dvp_level0.shp") #add the median household incomes for each zipcode to the .shp file
plot(zip, col=colors[findInterval(zip$INCOME, brks,all.inside=TRUE)], axes=F)
plot(zip)
plot(zip, col=colors[zip$REGION])
colors <- brewer.pal(9, "YlOrRd") #set breaks for the 9 colors
colors <- brewer.pal(6, "YlOrRd") #set breaks for the 9 colors
library(maptools)
library(RColorBrewer)
library(classInt)
## set the working directory.
setwd("/Users/juancarlosmunoz/Dropbox/Documents/Teaching/00_GIS_Applied_Economics/data_and_syntaxis/Session_2/Polygons/")
## load the shapefile
zip<- readShapePoly("Africa_dvp_level0.shp") #add the median household incomes for each zipcode to the .shp file
colors <- brewer.pal(6, "YlOrRd") #set breaks for the 9 colors
library(maptools)
library(RColorBrewer)
library(classInt)
## set the working directory.
setwd("/Users/juancarlosmunoz/Dropbox/Documents/Teaching/00_GIS_Applied_Economics/data_and_syntaxis/Session_2/Polygons/")
## load the shapefile
africa<- readShapePoly("Africa_dvp_level0.shp") #add the median household incomes for each zipcode to the .shp file
#select color palette and the number colors (levels of income) to represent on the map
colors <- brewer.pal(6, "YlOrRd") #set breaks for the 9 colors
brks<-classIntervals(africa$INCOME, n=6, style="quantile")
plot(zip, col=colors[(africa$REGION)], axes=F)
library(maptools)
library(RColorBrewer)
library(classInt)
## set the working directory.
setwd("/Users/juancarlosmunoz/Dropbox/Documents/Teaching/00_GIS_Applied_Economics/data_and_syntaxis/Session_2/Polygons/")
## load the shapefile
africa<- readShapePoly("Africa_dvp_level0.shp") #add the median household incomes for each zipcode to the .shp file
#select color palette and the number colors (levels of income) to represent on the map
colors <- brewer.pal(6, "YlOrRd") #set breaks for the 9 colors
plot(zip, col=colors[(africa$REGION)], axes=F)
library(maptools)
library(RColorBrewer)
## set the working directory.
setwd("/Users/juancarlosmunoz/Dropbox/Documents/Teaching/00_GIS_Applied_Economics/data_and_syntaxis/Session_2/Polygons/")
## load the shapefile
africa<- readShapePoly("Africa_dvp_level0.shp") #add the median household incomes for each zipcode to the .shp file
#select color palette and the number colors (levels of income) to represent on the map
colors <- brewer.pal(6, "YlOrRd") #set breaks for the 9 colors
plot(zip, col=colors[(africa$REGION)], axes=F)
#add a title
title(paste ("SF Bay Area Median Household Income"))
